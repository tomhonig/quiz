<?php

/**
 * Implements hook_theme().
 */
function quiz_theme() {
    return array(
        'quiz_questions_form' => array(
            'render element' => 'form',
        ),
        'quiz_questions' => array(
            'render element' => 'form',
            'template' => 'quiz-question',
        ),
        'quiz_result' => array(
            'render element' => 'form',
            'template' => 'quiz-result',
        ),
    );
}


function quiz_view_form($form, &$form_state, $node) {

    $form = array();
    $form['#node'] = $node;

    if (isset($form_state['clicked_button']['#value']) && $form_state['clicked_button']['#value'] == t('Finish')) {

        $form['#theme'] = 'quiz_result';

        $results = 0;
        foreach ($form_state['storage']['values'] as $i => $answ) {
            $results += $node->quiz[$i]['options'][$answ['options']]['correct'];
        } 

        $form['#quiz_values'] = $form_state['storage']['values'];

        db_merge('quiz_results')
            ->key(array('nid' => $node->nid))
            ->insertFields(array(
                'nid' => $node->nid,
            ))
             ->fields(array(
                'result' => (int) $results,
                'count' => 1,
                'timestamp' => time(),
            ))
            ->expression('count', 'count + 1')
            ->expression('result', 'result + :result', array(':result' => ((int) $results)))
            ->execute();  


        return $form;
    }

    $step = (isset($form_state['storage']['step'])) ? $form_state['storage']['step'] : 0;
    $form['#step'] = $step;
    $question = $node->quiz[$step];
    $options = array();

    foreach ($question['options'] as $k => $option) {
        if ($option['text'] != '')
            $options[$k] = $option['text'];
    }

    $form['#question'] = $question;

    $form['options'] = array(
        '#type' => 'radios',
        '#options' => $options,
        '#default_value' => (isset($form_state['storage']['values'][$step]['options'])) ? $form_state['storage']['values'][$step]['options'] : null,
    );
    $form['actions'] = array(
        '#type' => 'actions',
    );

    if(isset($node->quiz[$step - 1])){
        $form['actions']['back'] = array(
            '#type' => 'submit',
            '#value' => t('Back'),
        );
    }
    if (isset($node->quiz[$step + 1])) {
        $form['actions']['next'] = array(
            '#type' => 'submit',
            '#value' => t('Next'),
        );
    }
    else {
        $form['actions']['finish'] = array(
            '#type' => 'submit',
            '#value' => t('Finish'),
        );
    }

    $form['step'] = array(
        '#type' => 'hidden',
        '#value' => $step,
    );

    $form['#theme'] = 'quiz_questions';

    return $form;
}


function quiz_view_form_validate($form, &$form_state){
   
    if($form_state['clicked_button']['#value'] == t('Next') && empty($form_state['values']['options'])){
        form_set_error('options', t('You must select an answer!'));
    }
}


function quiz_view_form_submit($form, &$form_state) {

    if($form_state['clicked_button']['#value'] == t('Back')){
      $form_state['storage']['step'] = $form_state['values']['step'] - 1;
    }
    else{
      $form_state['storage']['step'] = $form_state['values']['step'] + 1;
    }
    $form_state['storage']['values'][$form_state['values']['step']] = $form_state['values'];
    $form_state['rebuild'] = TRUE;
    unset($form_state['input']['options']);
}


function quiz_questions_js($form, $form_state) {
    return $form['question_wrapper']['questions'];
}

function quiz_more_questions_submit($form, &$form_state) {

    if ($form_state['values']['quiz_more']) {
        $form_state['question_count'] = count($form_state['values']['questions']) + 1;
    }

    $form_state['node']->quiz = array_values($form_state['values']['questions']);
    unset($form_state['input']['questions']);
    $form_state['rebuild'] = TRUE;
}

function _quiz_question_form($key, $weight = 0, $question = NULL, $size = 10) {

    $form = array(
        '#tree' => TRUE,
        '#weight' => $weight,
    );

    $form['image'] = array(
        '#type' => 'managed_file',
        '#default_value' => (isset($question['image'])) ? $question['image'] : NULL,
        '#upload_location' => 'public://quiz/',
        '#parents' => array('questions', $key, 'image'),
    );

    $form['question'] = array(
        '#type' => 'textarea',
        '#cols' => 40,
        '#rows' => 3,
        '#default_value' => ($question['question']) ? $question['question'] : '',
        '#parents' => array('questions', $key, 'question'),
    );

    $form['weight'] = array(
        '#type' => 'weight',
        '#default_value' => $weight,
        '#delta' => $size,
        '#parents' => array('questions', $key, 'weight'),
    );

    $form['options'] = array(
        '#prefix' => '<div class="quiz-options">',
        '#suffix' => '</div>',
        '#parents' => array('questions', $key, 'options'),
    );

    $options = $question['options'];

    for($key = 0; $key < 3; $key++) {

        $form['options'][$key] = array(
            '#prefix' => '<div class="quiz-option">',
            '#suffix' => '</div>',
         );

        $form['options'][$key]['text'] = array(
            '#type' => 'textfield',
            '#size' => 30,
            '#default_value' => ($options[$key]['text']) ? $options[$key]['text'] : '',
        );

        $form['options'][$key]['correct'] = array(
            '#type' => 'checkbox',
            '#title' => t('Correct'),
            '#default_value' => ($options[$key]['correct']) ? $options[$key]['correct'] : 0,
        );
    }

    return $form;
}

/**
 * Implements hook_node_info().
 */
function quiz_node_info() {
    return array(
        'quiz' => array(
            'name' => t('Quiz'),
            'base' => 'quiz',
            'description' => t('A <em>quiz</em> is a quiz'),
            'title_label' => t('Quiz name'),
            'has_body' => FALSE,
        )
    );
}

/**
 * Implements hook_field_extra_fields().
 */
function quiz_field_extra_fields() {

    $extra['node']['quiz'] = array(
        'form' => array(
            'question_wrapper' => array(
                'label' => t('Quiz questions'),
                'description' => t('Quiz questions'),
                'weight' => 0,
            ),
        ),
        'display' => array(
            'quiz_questions' => array(
                'label' => t('Quiz questions'),
                'description' => t('Quiz questions'),
                'weight' => 0,
            ),
        )
    );

    return $extra;
}

 /**
 * Implements hook_form().
 */
function quiz_form($node, &$form_state) {

    $type = node_type_get_type($node);
    $form_state['cache'] = TRUE;

    $form['#attached'] = array(
      'css' => array(drupal_get_path('module', 'quiz') . '/quiz-admin.css'),
      'js' => array(drupal_get_path('module', 'quiz') . '/quiz-admin.js'),
    );

    $form['title'] = array(
        '#type' => 'textfield',
        '#title' => check_plain($type->title_label),
        '#required' => TRUE,
        '#default_value' => $node->title,
    );

    if (isset($form_state['question_count'])) {
        $question_count = $form_state['question_count'];
    }
    else {
        $question_count = max(3, empty($node->quiz) ? 3 : count($node->quiz));
    }

    $form['question_wrapper'] = array(
        '#tree' => FALSE,
        '#prefix' => '<div class="clearfix" id="quiz-question-wrapper">',
        '#suffix' => '</div>',
    );

    $form['question_wrapper']['questions'] = array(
        '#prefix' => '<div id="quiz-questions">',
        '#suffix' => '</div>',
        '#theme' => 'quiz_questions_form',
    );

    $delta = 0;
    $weight = 0;

    if (isset($node->quiz)) {
        $delta = count($node->quiz);
        foreach ($node->quiz as $key => $question) {
            $form['question_wrapper']['questions'][$key] = _quiz_question_form($key, $question['weight'], $question, $question_count);
            $weight = max($question['weight'], $weight);
        }
    }

    for ($delta; $delta < $question_count; $delta++) {
        $weight++;
        $form['question_wrapper']['questions'][$delta] = _quiz_question_form($delta, $weight, NULL, $question_count);
    }

    $form['question_wrapper']['quiz_more'] = array(
        '#type' => 'submit',
        '#value' => t('More questions'),
        '#weight' => 1,
        '#limit_validation_errors' => array(array('questions')),
        '#submit' => array('quiz_more_questions_submit'),
        '#ajax' => array(
            'callback' => 'quiz_questions_js',
            'wrapper' => 'quiz-questions',
            'effect' => 'fade',
        ),
    );

    return $form;
}

function quiz_node_form_submit(&$form, &$form_state) {

    foreach ($form_state['values']['questions'] as $key => $question){
        if(empty($question['question'])){
            unset($form_state['values']['questions'][$key]);
        }
    }
    $form_state['values']['quiz'] = array_values($form_state['values']['questions']);
}


/**
 * Implements hook_insert().
 */
function quiz_insert($node) {

    usort($node->quiz, "quiz_sort_questions");

    db_insert('quiz_questions')
            ->fields(array(
                'nid' => $node->nid,
                'questions' => serialize($node->quiz),
            ))
            ->execute();
}

function quiz_sort_questions($a, $b){

    if ($a['weight'] == $b['weight']) {
        return 0;
    }
    return ($a['weight'] < $b['weight']) ? -1 : 1;
}

/**
 * Implements hook_update().
 */
function quiz_update($node) {

    usort($node->quiz, "quiz_sort_questions");

    db_merge('quiz_questions')
            ->key(array('nid' => $node->nid))
            ->insertFields(array(
                'nid' => $node->nid,
            ))
             ->fields(array(
                'questions' => serialize($node->quiz),
            ))
            ->execute();
}

/**
 * Implements hook_delete()
 */
function quiz_delete($node) {

    db_delete('quiz_questions')
            ->condition('nid', $node->nid)
            ->execute();
}

/**
 * Implements hook_view().
 */
function quiz_view($node, $view_mode) {

    if(!empty($node->quiz)){
      $quiz_form = drupal_get_form('quiz_view_form', $node);
    }
    $node->content['quiz_questions'] = $quiz_form;

    return $node;
}

/**
 * Implements hook_validate().
 */
function quiz_validate($node, $form, $form_state) {
 
    foreach($form_state['values']['questions'] as $question){
        if(!empty($question['question'])){
            $text = $correct = 0;               
            foreach($question['options'] as $options){
                if(!empty($options['text'])){
                    $text++;
                }
                if($options['correct']){
                    $correct = true;
                }
            }

            if($text < 2){
                form_set_error('options', t('Each question must have atleast two answers'));
            }
            elseif(!$correct){
                form_set_error('options', t('Each question must have one correct answer'));
            }
        }
    }
}

/**
 * Implements hook_load().
 */
function quiz_load($nodes) {
   
    foreach ($nodes as $node) {

        $quiz = new stdClass();

        // Load the appropriate questions into the $quiz object.
        $quiz = db_select('quiz_questions', 'c')
                        ->fields('c', array('questions'))
                        ->condition('c.nid', $node->nid)
                        ->execute()->fetch();
        if($quiz){
             $nodes[$node->nid]->quiz = unserialize($quiz->questions);
        }
    }
}

/**
 *
 *
 * THEME HOOKS & TEMPLATE PREPROCESS FUNCTIONS
 * ------------------------------------------------------------------------------------
 * ************************************************************************************
 */

/**
 * Theme the quiz table in the node form
 */
function theme_quiz_questions_form($variables) {
    $form = $variables['form'];

    drupal_add_tabledrag('quiz-question-table', 'order', 'sibling', 'quiz-weight');

    $delta = 0;
    $rows = array();
    $headers = array('', t('Question'), t('Image'), t('Answers'), t('Weight'));


    foreach (element_children($form) as $key) {
        $delta++;
        // Set special classes for drag and drop updating.
        $form[$key]['weight']['#attributes']['class'] = array('quiz-weight');

        // Build the table row.
        $row = array(
            'data' => array(
                array('class' => array('choice-flag')),
                drupal_render($form[$key]['question']),
            ),
            'class' => array('draggable'),
        );

        $row['data'][] = drupal_render($form[$key]['image']);
        $row['data'][] = drupal_render($form[$key]['options']);
        $row['data'][] = drupal_render($form[$key]['weight']);

        // Add any additional classes set on the row.
        if (!empty($form[$key]['#attributes']['class'])) {
            $row['class'] = array_merge($row['class'], $form[$key]['#attributes']['class']);
        }

        $rows[] = $row;
    }

    $output = theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => array('id' => 'quiz-question-table')));
    $output .= drupal_render_children($form);
    return $output;
}

/**
 * Adds some variables to quiz-questions.tpl.php
 */
function template_preprocess_quiz_questions(&$variables) {
    $form = $variables['form'];

    $variables['step'] = $form['#step'];
    $variables['count_questions'] = count($form['#node']->quiz);
    
    if (isset($form['#question']['image']) && $image = file_load($form['#question']['image'])) {
        $image = theme('image_style', array('style_name' => 'quiz_view', 'path' => $image->uri));
    } else {
        $image = '';
    }

    $variables['options'] = drupal_render($form['options']);
    $variables['image'] = $image;
    $variables['actions'] = drupal_render($form['action']);
    $variables['question'] = $form['#question']['question'];
    $variables['rest'] = drupal_render_children($form);
}

/**
 * Adds some variables to quiz-result.tpl.php
 */
function template_preprocess_quiz_result(&$variables) {

    $form = $variables['form'];
    $node = $form['#node'];
    $values = $form['#quiz_values'];
    $count_questions = count($node->quiz);
    $results = db_query("SELECT * FROM {quiz_results} WHERE nid = :nid", array(':nid' => $node->nid))->fetch();
    
    $avg = round((($results->result / ($count_questions * $results->count))) * 100, 2) . '%';
    $total = 0;
    $header = array(t('Question'), '',t('You answered'), t('Correct answer'), t('Score'));
    $rows = array();

    foreach ($node->quiz as $i => $question) {
        if (isset($question['image']) && $image = file_load($question['image'])) {
            $image = theme('image_style', array('style_name' => 'quiz_mini', 'path' => $image->uri));
        } else {
            $image = '';
        }

        $user_answer = $question['options'][$values[$i]['options']]['text'];

        foreach($question['options'] as $option){
          if($option['correct']){
            $correct_answer = $option['text'];
            $score = ($user_answer == $correct_answer) ? 1 : 0;
          break;
          }
        }
        $total += $score;
        $rows[] = array($image, $question['question'], $user_answer, $correct_answer, $score);
    }
    
    $text = t('@count people have taken the quiz, and on average had @avg correct answers, you did @count_correct out of @count_questions questions.',
          array(
              '@count' => $results->count,
              '@avg' => $avg,
              '@count_questions' => $count_questions,
              '@count_correct' => $total,
            ));
    
    $variables['snippet'] = $text;
    $variables['results'] = theme('table', array('rows' => $rows, 'header' => $header));
    $variables['actions'] = l(t('Try it again'), 'node/'.$node->nid, array('attributes' => array('class' => array('button'))));
}